# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _trie
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class _TrieNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _TrieNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _TrieNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _trie._TrieNode_data_set
    __swig_getmethods__["data"] = _trie._TrieNode_data_get
    if _newclass:data = _swig_property(_trie._TrieNode_data_get, _trie._TrieNode_data_set)
    __swig_setmethods__["use_count"] = _trie._TrieNode_use_count_set
    __swig_getmethods__["use_count"] = _trie._TrieNode_use_count_get
    if _newclass:use_count = _swig_property(_trie._TrieNode_use_count_get, _trie._TrieNode_use_count_set)
    __swig_setmethods__["next"] = _trie._TrieNode_next_set
    __swig_getmethods__["next"] = _trie._TrieNode_next_get
    if _newclass:next = _swig_property(_trie._TrieNode_next_get, _trie._TrieNode_next_set)
    def __init__(self, *args): 
        this = _trie.new__TrieNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trie.delete__TrieNode
    __del__ = lambda self : None;
_TrieNode_swigregister = _trie._TrieNode_swigregister
_TrieNode_swigregister(_TrieNode)

class Trie(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trie, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root_node"] = _trie.Trie_root_node_set
    __swig_getmethods__["root_node"] = _trie.Trie_root_node_get
    if _newclass:root_node = _swig_property(_trie.Trie_root_node_get, _trie.Trie_root_node_set)
    def __init__(self, *args): 
        this = _trie.new_Trie(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trie.delete_Trie
    __del__ = lambda self : None;
    def insert(*args): return _trie.Trie_insert(*args)
    def find(*args): return _trie.Trie_find(*args)
    def remove(*args): return _trie.Trie_remove(*args)
Trie_swigregister = _trie.Trie_swigregister
Trie_swigregister(Trie)

trie_new = _trie.trie_new
trie_free = _trie.trie_free
trie_insert = _trie.trie_insert
trie_lookup = _trie.trie_lookup
trie_remove = _trie.trie_remove
trie_num_entries = _trie.trie_num_entries


